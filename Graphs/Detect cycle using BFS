import java.util.*;

public class Solution {
    private boolean bfs(int start, boolean[] visited, List<Integer>[] adj) {
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{start, -1}); // {node, parent}
        visited[start] = true;

        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int node = curr[0];
            int parent = curr[1];

            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.add(new int[]{neighbor, node});
                } else if (neighbor != parent) {
                    return true; // cycle detected
                }
            }
        }
        return false;
    }

    public boolean isCycle(int V, int[][] edges) {
        List<Integer>[] adj = new ArrayList[V];
        for (int i = 0; i < V; i++) adj[i] = new ArrayList<>();
        for (int[] e : edges) {
            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }

        boolean[] visited = new boolean[V];
        for (int i = 0; i < V; i++) {
            if (!visited[i] && bfs(i, visited, adj)) return true;
        }
        return false;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        int V = 4;
        int[][] edges = {
            {0, 1},
            {1, 2},
            {2, 3},
            {3, 0} // creates a cycle
        };

        System.out.println(sol.isCycle(V, edges) ?
            "Graph contains cycle" : "Graph doesn't contain cycle");
    }
}
